
Module_HC06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f78  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001078  08001078  00011078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800107c  0800107c  0001107c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000008  08001088  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000028  08001088  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001485  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000005da  00000000  00000000  000214b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000c8  00000000  00000000  00021a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000bee  00000000  00000000  00021b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000793  00000000  00000000  00022746  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00022ed9  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000408  00000000  00000000  00022f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00023360  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001018 	.word	0x08001018

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	08001018 	.word	0x08001018

08000104 <main>:
uint8_t	console_rx_irq_1=0;

// Main program

int main()
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0

	// Configure System Clock
	SystemClock_Config();
 8000108:	f000 f832 	bl	8000170 <SystemClock_Config>

	GPIO_Configuration();
 800010c:	f000 fca6 	bl	8000a5c <GPIO_Configuration>
	USART_Configuration();
 8000110:	f000 fcf2 	bl	8000af8 <USART_Configuration>
	USART1_Configuration();
 8000114:	f000 fd5a 	bl	8000bcc <USART1_Configuration>

	// Initialize NVIC
	BSP_NVIC_Init();
 8000118:	f000 fdc2 	bl	8000ca0 <BSP_NVIC_Init>

	my_printf("Console ready!\r\n");
 800011c:	4b0f      	ldr	r3, [pc, #60]	; (800015c <main+0x58>)
 800011e:	0018      	movs	r0, r3
 8000120:	f000 fae8 	bl	80006f4 <my_printf>
			BSP_LED_On();
			my_printf("You've hit the '%c' key\r\n", console_rx_byte);
			console_rx_irq = 0;
		}*/

		if (console_rx_irq_1 == 1)
 8000124:	4b0e      	ldr	r3, [pc, #56]	; (8000160 <main+0x5c>)
 8000126:	781b      	ldrb	r3, [r3, #0]
 8000128:	2b01      	cmp	r3, #1
 800012a:	d1fb      	bne.n	8000124 <main+0x20>
		{
			if(console_rx_byte_1 == '1')
 800012c:	4b0d      	ldr	r3, [pc, #52]	; (8000164 <main+0x60>)
 800012e:	781b      	ldrb	r3, [r3, #0]
 8000130:	2b31      	cmp	r3, #49	; 0x31
 8000132:	d105      	bne.n	8000140 <main+0x3c>
			{
				BSP_LED_On();
 8000134:	f000 fc2a 	bl	800098c <BSP_LED_On>
				my_printf("LED On");
 8000138:	4b0b      	ldr	r3, [pc, #44]	; (8000168 <main+0x64>)
 800013a:	0018      	movs	r0, r3
 800013c:	f000 fada 	bl	80006f4 <my_printf>
			}

			if(console_rx_byte_1 == '0')
 8000140:	4b08      	ldr	r3, [pc, #32]	; (8000164 <main+0x60>)
 8000142:	781b      	ldrb	r3, [r3, #0]
 8000144:	2b30      	cmp	r3, #48	; 0x30
 8000146:	d105      	bne.n	8000154 <main+0x50>
			{
				BSP_LED_Off();
 8000148:	f000 fc2e 	bl	80009a8 <BSP_LED_Off>
				my_printf("LED Off");
 800014c:	4b07      	ldr	r3, [pc, #28]	; (800016c <main+0x68>)
 800014e:	0018      	movs	r0, r3
 8000150:	f000 fad0 	bl	80006f4 <my_printf>
			}


			console_rx_irq_1 = 0;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <main+0x5c>)
 8000156:	2200      	movs	r2, #0
 8000158:	701a      	strb	r2, [r3, #0]
		if (console_rx_irq_1 == 1)
 800015a:	e7e3      	b.n	8000124 <main+0x20>
 800015c:	08001034 	.word	0x08001034
 8000160:	20000027 	.word	0x20000027
 8000164:	20000026 	.word	0x20000026
 8000168:	08001048 	.word	0x08001048
 800016c:	08001050 	.word	0x08001050

08000170 <SystemClock_Config>:
 *
 *  Laurent Latorre - 05/08/2017
 */

static void SystemClock_Config()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	60fb      	str	r3, [r7, #12]

	timeout = 1000000;
 800017a:	4b64      	ldr	r3, [pc, #400]	; (800030c <SystemClock_Config+0x19c>)
 800017c:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 800017e:	4b64      	ldr	r3, [pc, #400]	; (8000310 <SystemClock_Config+0x1a0>)
 8000180:	4a63      	ldr	r2, [pc, #396]	; (8000310 <SystemClock_Config+0x1a0>)
 8000182:	6812      	ldr	r2, [r2, #0]
 8000184:	2180      	movs	r1, #128	; 0x80
 8000186:	02c9      	lsls	r1, r1, #11
 8000188:	430a      	orrs	r2, r1
 800018a:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 800018c:	4b60      	ldr	r3, [pc, #384]	; (8000310 <SystemClock_Config+0x1a0>)
 800018e:	4a60      	ldr	r2, [pc, #384]	; (8000310 <SystemClock_Config+0x1a0>)
 8000190:	6812      	ldr	r2, [r2, #0]
 8000192:	2180      	movs	r1, #128	; 0x80
 8000194:	0249      	lsls	r1, r1, #9
 8000196:	430a      	orrs	r2, r1
 8000198:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 800019a:	4b5d      	ldr	r3, [pc, #372]	; (8000310 <SystemClock_Config+0x1a0>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	2380      	movs	r3, #128	; 0x80
 80001a0:	029b      	lsls	r3, r3, #10
 80001a2:	4013      	ands	r3, r2
 80001a4:	60bb      	str	r3, [r7, #8]
		timeout--;
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	3b01      	subs	r3, #1
 80001aa:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d102      	bne.n	80001b8 <SystemClock_Config+0x48>
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d1f0      	bne.n	800019a <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 80001b8:	4b55      	ldr	r3, [pc, #340]	; (8000310 <SystemClock_Config+0x1a0>)
 80001ba:	4a55      	ldr	r2, [pc, #340]	; (8000310 <SystemClock_Config+0x1a0>)
 80001bc:	6852      	ldr	r2, [r2, #4]
 80001be:	4955      	ldr	r1, [pc, #340]	; (8000314 <SystemClock_Config+0x1a4>)
 80001c0:	400a      	ands	r2, r1
 80001c2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 80001c4:	4b52      	ldr	r3, [pc, #328]	; (8000310 <SystemClock_Config+0x1a0>)
 80001c6:	4a52      	ldr	r2, [pc, #328]	; (8000310 <SystemClock_Config+0x1a0>)
 80001c8:	6852      	ldr	r2, [r2, #4]
 80001ca:	2180      	movs	r1, #128	; 0x80
 80001cc:	0249      	lsls	r1, r1, #9
 80001ce:	430a      	orrs	r2, r1
 80001d0:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 80001d2:	4b4f      	ldr	r3, [pc, #316]	; (8000310 <SystemClock_Config+0x1a0>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 80001d8:	4b4d      	ldr	r3, [pc, #308]	; (8000310 <SystemClock_Config+0x1a0>)
 80001da:	4a4d      	ldr	r2, [pc, #308]	; (8000310 <SystemClock_Config+0x1a0>)
 80001dc:	6852      	ldr	r2, [r2, #4]
 80001de:	494e      	ldr	r1, [pc, #312]	; (8000318 <SystemClock_Config+0x1a8>)
 80001e0:	400a      	ands	r2, r1
 80001e2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 80001e4:	4b4a      	ldr	r3, [pc, #296]	; (8000310 <SystemClock_Config+0x1a0>)
 80001e6:	4a4a      	ldr	r2, [pc, #296]	; (8000310 <SystemClock_Config+0x1a0>)
 80001e8:	6852      	ldr	r2, [r2, #4]
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	0349      	lsls	r1, r1, #13
 80001ee:	430a      	orrs	r2, r1
 80001f0:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 80001f2:	4b47      	ldr	r3, [pc, #284]	; (8000310 <SystemClock_Config+0x1a0>)
 80001f4:	4a46      	ldr	r2, [pc, #280]	; (8000310 <SystemClock_Config+0x1a0>)
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	0449      	lsls	r1, r1, #17
 80001fc:	430a      	orrs	r2, r1
 80001fe:	601a      	str	r2, [r3, #0]

	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8000200:	4b43      	ldr	r3, [pc, #268]	; (8000310 <SystemClock_Config+0x1a0>)
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	2380      	movs	r3, #128	; 0x80
 8000206:	049b      	lsls	r3, r3, #18
 8000208:	4013      	ands	r3, r2
 800020a:	607b      	str	r3, [r7, #4]
		timeout--;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	3b01      	subs	r3, #1
 8000210:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d102      	bne.n	800021e <SystemClock_Config+0xae>
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d1f0      	bne.n	8000200 <SystemClock_Config+0x90>

        // Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 800021e:	4b3c      	ldr	r3, [pc, #240]	; (8000310 <SystemClock_Config+0x1a0>)
 8000220:	4a3b      	ldr	r2, [pc, #236]	; (8000310 <SystemClock_Config+0x1a0>)
 8000222:	6852      	ldr	r2, [r2, #4]
 8000224:	21f0      	movs	r1, #240	; 0xf0
 8000226:	438a      	bics	r2, r1
 8000228:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800022a:	4b39      	ldr	r3, [pc, #228]	; (8000310 <SystemClock_Config+0x1a0>)
 800022c:	4a38      	ldr	r2, [pc, #224]	; (8000310 <SystemClock_Config+0x1a0>)
 800022e:	6852      	ldr	r2, [r2, #4]
 8000230:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8000232:	4b37      	ldr	r3, [pc, #220]	; (8000310 <SystemClock_Config+0x1a0>)
 8000234:	4a36      	ldr	r2, [pc, #216]	; (8000310 <SystemClock_Config+0x1a0>)
 8000236:	6852      	ldr	r2, [r2, #4]
 8000238:	4938      	ldr	r1, [pc, #224]	; (800031c <SystemClock_Config+0x1ac>)
 800023a:	400a      	ands	r2, r1
 800023c:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 800023e:	4b34      	ldr	r3, [pc, #208]	; (8000310 <SystemClock_Config+0x1a0>)
 8000240:	4a33      	ldr	r2, [pc, #204]	; (8000310 <SystemClock_Config+0x1a0>)
 8000242:	6852      	ldr	r2, [r2, #4]
 8000244:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000246:	4b36      	ldr	r3, [pc, #216]	; (8000320 <SystemClock_Config+0x1b0>)
 8000248:	2211      	movs	r2, #17
 800024a:	601a      	str	r2, [r3, #0]

	/* --- Until this point, MCU was still clocked by HSI at 8MHz ---*/
	/* --- Switching to PLL at 48MHz Now!  Fasten your seat belt! ---*/

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800024c:	4b30      	ldr	r3, [pc, #192]	; (8000310 <SystemClock_Config+0x1a0>)
 800024e:	4a30      	ldr	r2, [pc, #192]	; (8000310 <SystemClock_Config+0x1a0>)
 8000250:	6852      	ldr	r2, [r2, #4]
 8000252:	2103      	movs	r1, #3
 8000254:	438a      	bics	r2, r1
 8000256:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <SystemClock_Config+0x1a0>)
 800025a:	4a2d      	ldr	r2, [pc, #180]	; (8000310 <SystemClock_Config+0x1a0>)
 800025c:	6852      	ldr	r2, [r2, #4]
 800025e:	2102      	movs	r1, #2
 8000260:	430a      	orrs	r2, r1
 8000262:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8000264:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <SystemClock_Config+0x1a0>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	220c      	movs	r2, #12
 800026a:	4013      	ands	r3, r2
 800026c:	603b      	str	r3, [r7, #0]
		timeout--;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3b01      	subs	r3, #1
 8000272:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	2b08      	cmp	r3, #8
 8000278:	d002      	beq.n	8000280 <SystemClock_Config+0x110>
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f1      	bne.n	8000264 <SystemClock_Config+0xf4>
	/* --- Here we go! ---*/

	/*--- Use PA8 as MCO output at 48/16 = 3MHz ---*/

	// Set MCO source as SYSCLK (48MHz)
	RCC->CFGR &= ~RCC_CFGR_MCO_Msk;
 8000280:	4b23      	ldr	r3, [pc, #140]	; (8000310 <SystemClock_Config+0x1a0>)
 8000282:	4a23      	ldr	r2, [pc, #140]	; (8000310 <SystemClock_Config+0x1a0>)
 8000284:	6852      	ldr	r2, [r2, #4]
 8000286:	4927      	ldr	r1, [pc, #156]	; (8000324 <SystemClock_Config+0x1b4>)
 8000288:	400a      	ands	r2, r1
 800028a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |=  RCC_CFGR_MCOSEL_SYSCLK;
 800028c:	4b20      	ldr	r3, [pc, #128]	; (8000310 <SystemClock_Config+0x1a0>)
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <SystemClock_Config+0x1a0>)
 8000290:	6852      	ldr	r2, [r2, #4]
 8000292:	2180      	movs	r1, #128	; 0x80
 8000294:	04c9      	lsls	r1, r1, #19
 8000296:	430a      	orrs	r2, r1
 8000298:	605a      	str	r2, [r3, #4]

	// Set MCO prescaler to /16 -> 3MHz
	RCC->CFGR &= ~RCC_CFGR_MCOPRE_Msk;
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <SystemClock_Config+0x1a0>)
 800029c:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <SystemClock_Config+0x1a0>)
 800029e:	6852      	ldr	r2, [r2, #4]
 80002a0:	4921      	ldr	r1, [pc, #132]	; (8000328 <SystemClock_Config+0x1b8>)
 80002a2:	400a      	ands	r2, r1
 80002a4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |=  RCC_CFGR_MCOPRE_DIV16;
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <SystemClock_Config+0x1a0>)
 80002a8:	4a19      	ldr	r2, [pc, #100]	; (8000310 <SystemClock_Config+0x1a0>)
 80002aa:	6852      	ldr	r2, [r2, #4]
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	05c9      	lsls	r1, r1, #23
 80002b0:	430a      	orrs	r2, r1
 80002b2:	605a      	str	r2, [r3, #4]

	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <SystemClock_Config+0x1a0>)
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <SystemClock_Config+0x1a0>)
 80002b8:	6952      	ldr	r2, [r2, #20]
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0289      	lsls	r1, r1, #10
 80002be:	430a      	orrs	r2, r1
 80002c0:	615a      	str	r2, [r3, #20]

	// Configure PA8 as Alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 80002c2:	2390      	movs	r3, #144	; 0x90
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	2290      	movs	r2, #144	; 0x90
 80002c8:	05d2      	lsls	r2, r2, #23
 80002ca:	6812      	ldr	r2, [r2, #0]
 80002cc:	4917      	ldr	r1, [pc, #92]	; (800032c <SystemClock_Config+0x1bc>)
 80002ce:	400a      	ands	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos);
 80002d2:	2390      	movs	r3, #144	; 0x90
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	2290      	movs	r2, #144	; 0x90
 80002d8:	05d2      	lsls	r2, r2, #23
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	2180      	movs	r1, #128	; 0x80
 80002de:	0289      	lsls	r1, r1, #10
 80002e0:	430a      	orrs	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]

	// Set to AF0 (MCO output)
	GPIOA->AFR[1] &= ~(0x0000000F);
 80002e4:	2390      	movs	r3, #144	; 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2290      	movs	r2, #144	; 0x90
 80002ea:	05d2      	lsls	r2, r2, #23
 80002ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80002ee:	210f      	movs	r1, #15
 80002f0:	438a      	bics	r2, r1
 80002f2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00000000);
 80002f4:	2390      	movs	r3, #144	; 0x90
 80002f6:	05db      	lsls	r3, r3, #23
 80002f8:	2290      	movs	r2, #144	; 0x90
 80002fa:	05d2      	lsls	r2, r2, #23
 80002fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8000300:	f000 fd30 	bl	8000d64 <SystemCoreClockUpdate>
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b004      	add	sp, #16
 800030a:	bd80      	pop	{r7, pc}
 800030c:	000f4240 	.word	0x000f4240
 8000310:	40021000 	.word	0x40021000
 8000314:	fffe7fff 	.word	0xfffe7fff
 8000318:	ffc3ffff 	.word	0xffc3ffff
 800031c:	fffff8ff 	.word	0xfffff8ff
 8000320:	40022000 	.word	0x40022000
 8000324:	f0ffffff 	.word	0xf0ffffff
 8000328:	8fffffff 	.word	0x8fffffff
 800032c:	fffcffff 	.word	0xfffcffff

08000330 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	if (str) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d00a      	beq.n	8000356 <printchar+0x26>
		**str = c;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	701a      	strb	r2, [r3, #0]
		++(*str);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART1->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART1->TDR = c;
	}
}
 8000354:	e00a      	b.n	800036c <printchar+0x3c>
		while ( (USART1->ISR & USART_ISR_TC) != USART_ISR_TC);
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <printchar+0x44>)
 800035a:	69db      	ldr	r3, [r3, #28]
 800035c:	2240      	movs	r2, #64	; 0x40
 800035e:	4013      	ands	r3, r2
 8000360:	2b40      	cmp	r3, #64	; 0x40
 8000362:	d1f9      	bne.n	8000358 <printchar+0x28>
		USART1->TDR = c;
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <printchar+0x44>)
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	b292      	uxth	r2, r2
 800036a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b002      	add	sp, #8
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40013800 	.word	0x40013800

08000378 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6178      	str	r0, [r7, #20]
 8000380:	6139      	str	r1, [r7, #16]
 8000382:	60fa      	str	r2, [r7, #12]
 8000384:	60bb      	str	r3, [r7, #8]
	register int pc = 0, padchar = ' ';
 8000386:	2400      	movs	r4, #0
 8000388:	2320      	movs	r3, #32
 800038a:	607b      	str	r3, [r7, #4]

	if (width > 0) {
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	2b00      	cmp	r3, #0
 8000390:	dd16      	ble.n	80003c0 <prints+0x48>
		register int len = 0;
 8000392:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000394:	693e      	ldr	r6, [r7, #16]
 8000396:	e001      	b.n	800039c <prints+0x24>
 8000398:	3501      	adds	r5, #1
 800039a:	3601      	adds	r6, #1
 800039c:	7833      	ldrb	r3, [r6, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1fa      	bne.n	8000398 <prints+0x20>
		if (len >= width) width = 0;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	429d      	cmp	r5, r3
 80003a6:	db02      	blt.n	80003ae <prints+0x36>
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e002      	b.n	80003b4 <prints+0x3c>
		else width -= len;
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	1b5b      	subs	r3, r3, r5
 80003b2:	60fb      	str	r3, [r7, #12]
		if (pad & PAD_ZERO) padchar = '0';
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	2202      	movs	r2, #2
 80003b8:	4013      	ands	r3, r2
 80003ba:	d001      	beq.n	80003c0 <prints+0x48>
 80003bc:	2330      	movs	r3, #48	; 0x30
 80003be:	607b      	str	r3, [r7, #4]
	}
	if (!(pad & PAD_RIGHT)) {
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	2201      	movs	r2, #1
 80003c4:	4013      	ands	r3, r2
 80003c6:	d119      	bne.n	80003fc <prints+0x84>
		for ( ; width > 0; --width) {
 80003c8:	e008      	b.n	80003dc <prints+0x64>
			printchar (out, padchar);
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	6879      	ldr	r1, [r7, #4]
 80003ce:	0018      	movs	r0, r3
 80003d0:	f7ff ffae 	bl	8000330 <printchar>
			++pc;
 80003d4:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3b01      	subs	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	dcf3      	bgt.n	80003ca <prints+0x52>
		}
	}
	for ( ; *string ; ++string) {
 80003e2:	e00b      	b.n	80003fc <prints+0x84>
		printchar (out, *string);
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	001a      	movs	r2, r3
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f7ff ff9e 	bl	8000330 <printchar>
		++pc;
 80003f4:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	3301      	adds	r3, #1
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1ef      	bne.n	80003e4 <prints+0x6c>
	}
	for ( ; width > 0; --width) {
 8000404:	e008      	b.n	8000418 <prints+0xa0>
		printchar (out, padchar);
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	0018      	movs	r0, r3
 800040c:	f7ff ff90 	bl	8000330 <printchar>
		++pc;
 8000410:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3b01      	subs	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	2b00      	cmp	r3, #0
 800041c:	dcf3      	bgt.n	8000406 <prints+0x8e>
	}

	return pc;
 800041e:	0023      	movs	r3, r4
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b007      	add	sp, #28
 8000426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000428 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	46c6      	mov	lr, r8
 800042c:	b500      	push	{lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6178      	str	r0, [r7, #20]
 8000434:	6139      	str	r1, [r7, #16]
 8000436:	60fa      	str	r2, [r7, #12]
 8000438:	60bb      	str	r3, [r7, #8]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	4698      	mov	r8, r3
 800043e:	2500      	movs	r5, #0
	register unsigned int u = i;
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	607b      	str	r3, [r7, #4]

	if (i == 0) {
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d119      	bne.n	800047e <printi+0x56>
		print_buf[0] = '0';
 800044a:	2314      	movs	r3, #20
 800044c:	2208      	movs	r2, #8
 800044e:	4694      	mov	ip, r2
 8000450:	44bc      	add	ip, r7
 8000452:	4463      	add	r3, ip
 8000454:	2230      	movs	r2, #48	; 0x30
 8000456:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8000458:	2314      	movs	r3, #20
 800045a:	2208      	movs	r2, #8
 800045c:	4694      	mov	ip, r2
 800045e:	44bc      	add	ip, r7
 8000460:	4463      	add	r3, ip
 8000462:	2200      	movs	r2, #0
 8000464:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8000466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800046a:	2114      	movs	r1, #20
 800046c:	2008      	movs	r0, #8
 800046e:	4684      	mov	ip, r0
 8000470:	44bc      	add	ip, r7
 8000472:	4461      	add	r1, ip
 8000474:	6978      	ldr	r0, [r7, #20]
 8000476:	f7ff ff7f 	bl	8000378 <prints>
 800047a:	0003      	movs	r3, r0
 800047c:	e04f      	b.n	800051e <printi+0xf6>
	}

	if (sg && b == 10 && i < 0) {
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d00a      	beq.n	800049a <printi+0x72>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	2b0a      	cmp	r3, #10
 8000488:	d107      	bne.n	800049a <printi+0x72>
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	2b00      	cmp	r3, #0
 800048e:	da04      	bge.n	800049a <printi+0x72>
		neg = 1;
 8000490:	2301      	movs	r3, #1
 8000492:	4698      	mov	r8, r3
		u = -i;
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	425b      	negs	r3, r3
 8000498:	607b      	str	r3, [r7, #4]
	}

	s = print_buf + PRINT_BUF_LEN-1;
 800049a:	2314      	movs	r3, #20
 800049c:	2208      	movs	r2, #8
 800049e:	18ba      	adds	r2, r7, r2
 80004a0:	18d4      	adds	r4, r2, r3
 80004a2:	340b      	adds	r4, #11
	*s = '\0';
 80004a4:	2300      	movs	r3, #0
 80004a6:	7023      	strb	r3, [r4, #0]

	while (u) {
 80004a8:	e017      	b.n	80004da <printi+0xb2>
		t = u % b;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	0019      	movs	r1, r3
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f000 fd5e 	bl	8000f70 <__aeabi_uidivmod>
 80004b4:	000b      	movs	r3, r1
 80004b6:	001e      	movs	r6, r3
		if( t >= 10 )
 80004b8:	2e09      	cmp	r6, #9
 80004ba:	dd02      	ble.n	80004c2 <printi+0x9a>
			t += letbase - '0' - 10;
 80004bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004be:	3b3a      	subs	r3, #58	; 0x3a
 80004c0:	18f6      	adds	r6, r6, r3
		*--s = t + '0';
 80004c2:	3c01      	subs	r4, #1
 80004c4:	b2f3      	uxtb	r3, r6
 80004c6:	3330      	adds	r3, #48	; 0x30
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	7023      	strb	r3, [r4, #0]
		u /= b;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	0019      	movs	r1, r3
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 fcc7 	bl	8000e64 <__udivsi3>
 80004d6:	0003      	movs	r3, r0
 80004d8:	607b      	str	r3, [r7, #4]
	while (u) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1e4      	bne.n	80004aa <printi+0x82>
	}

	if (neg) {
 80004e0:	4643      	mov	r3, r8
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d013      	beq.n	800050e <printi+0xe6>
		if( width && (pad & PAD_ZERO) ) {
 80004e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00d      	beq.n	8000508 <printi+0xe0>
 80004ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004ee:	2202      	movs	r2, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	d009      	beq.n	8000508 <printi+0xe0>
			printchar (out, '-');
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	212d      	movs	r1, #45	; 0x2d
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff ff19 	bl	8000330 <printchar>
			++pc;
 80004fe:	3501      	adds	r5, #1
			--width;
 8000500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000502:	3b01      	subs	r3, #1
 8000504:	643b      	str	r3, [r7, #64]	; 0x40
 8000506:	e002      	b.n	800050e <printi+0xe6>
		}
		else {
			*--s = '-';
 8000508:	3c01      	subs	r4, #1
 800050a:	232d      	movs	r3, #45	; 0x2d
 800050c:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800050e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000512:	6978      	ldr	r0, [r7, #20]
 8000514:	0021      	movs	r1, r4
 8000516:	f7ff ff2f 	bl	8000378 <prints>
 800051a:	0003      	movs	r3, r0
 800051c:	195b      	adds	r3, r3, r5
}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	b00a      	add	sp, #40	; 0x28
 8000524:	bc04      	pop	{r2}
 8000526:	4690      	mov	r8, r2
 8000528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800052a <print>:

static int print(char **out, const char *format, va_list args )
{
 800052a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052c:	b08b      	sub	sp, #44	; 0x2c
 800052e:	af04      	add	r7, sp, #16
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000536:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000538:	e0c7      	b.n	80006ca <print+0x1a0>
		if (*format == '%') {
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b25      	cmp	r3, #37	; 0x25
 8000540:	d000      	beq.n	8000544 <print+0x1a>
 8000542:	e0b6      	b.n	80006b2 <print+0x188>
			++format;
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	3301      	adds	r3, #1
 8000548:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 800054a:	2600      	movs	r6, #0
 800054c:	0035      	movs	r5, r6
			if (*format == '\0') break;
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <print+0x2e>
 8000556:	e0be      	b.n	80006d6 <print+0x1ac>
			if (*format == '%') goto out;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b25      	cmp	r3, #37	; 0x25
 800055e:	d100      	bne.n	8000562 <print+0x38>
 8000560:	e0a6      	b.n	80006b0 <print+0x186>
			if (*format == '-') {
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b2d      	cmp	r3, #45	; 0x2d
 8000568:	d10a      	bne.n	8000580 <print+0x56>
				++format;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	3301      	adds	r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000570:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000572:	e005      	b.n	8000580 <print+0x56>
				++format;
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	3301      	adds	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 800057a:	2302      	movs	r3, #2
 800057c:	4333      	orrs	r3, r6
 800057e:	001e      	movs	r6, r3
			while (*format == '0') {
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b30      	cmp	r3, #48	; 0x30
 8000586:	d0f5      	beq.n	8000574 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000588:	e00b      	b.n	80005a2 <print+0x78>
				width *= 10;
 800058a:	002b      	movs	r3, r5
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	195b      	adds	r3, r3, r5
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	001d      	movs	r5, r3
				width += *format - '0';
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3b30      	subs	r3, #48	; 0x30
 800059a:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	3301      	adds	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b2f      	cmp	r3, #47	; 0x2f
 80005a8:	d903      	bls.n	80005b2 <print+0x88>
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b39      	cmp	r3, #57	; 0x39
 80005b0:	d9eb      	bls.n	800058a <print+0x60>
			}
			if( *format == 's' ) {
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b73      	cmp	r3, #115	; 0x73
 80005b8:	d110      	bne.n	80005dc <print+0xb2>
				register char *s = (char *)va_arg( args, int );
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	1d1a      	adds	r2, r3, #4
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <print+0xa0>
 80005c6:	0019      	movs	r1, r3
 80005c8:	e000      	b.n	80005cc <print+0xa2>
 80005ca:	4949      	ldr	r1, [pc, #292]	; (80006f0 <print+0x1c6>)
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	0033      	movs	r3, r6
 80005d0:	002a      	movs	r2, r5
 80005d2:	f7ff fed1 	bl	8000378 <prints>
 80005d6:	0003      	movs	r3, r0
 80005d8:	18e4      	adds	r4, r4, r3
				continue;
 80005da:	e073      	b.n	80006c4 <print+0x19a>
			}
			if( *format == 'd' ) {
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b64      	cmp	r3, #100	; 0x64
 80005e2:	d10f      	bne.n	8000604 <print+0xda>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	1d1a      	adds	r2, r3, #4
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	68f8      	ldr	r0, [r7, #12]
 80005ee:	2361      	movs	r3, #97	; 0x61
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	9601      	str	r6, [sp, #4]
 80005f4:	9500      	str	r5, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	220a      	movs	r2, #10
 80005fa:	f7ff ff15 	bl	8000428 <printi>
 80005fe:	0003      	movs	r3, r0
 8000600:	18e4      	adds	r4, r4, r3
				continue;
 8000602:	e05f      	b.n	80006c4 <print+0x19a>
			}
			if( *format == 'x' ) {
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b78      	cmp	r3, #120	; 0x78
 800060a:	d10f      	bne.n	800062c <print+0x102>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	1d1a      	adds	r2, r3, #4
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	6819      	ldr	r1, [r3, #0]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	2361      	movs	r3, #97	; 0x61
 8000618:	9302      	str	r3, [sp, #8]
 800061a:	9601      	str	r6, [sp, #4]
 800061c:	9500      	str	r5, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2210      	movs	r2, #16
 8000622:	f7ff ff01 	bl	8000428 <printi>
 8000626:	0003      	movs	r3, r0
 8000628:	18e4      	adds	r4, r4, r3
				continue;
 800062a:	e04b      	b.n	80006c4 <print+0x19a>
			}
			if( *format == 'X' ) {
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b58      	cmp	r3, #88	; 0x58
 8000632:	d10f      	bne.n	8000654 <print+0x12a>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	1d1a      	adds	r2, r3, #4
 8000638:	607a      	str	r2, [r7, #4]
 800063a:	6819      	ldr	r1, [r3, #0]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	2341      	movs	r3, #65	; 0x41
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	9601      	str	r6, [sp, #4]
 8000644:	9500      	str	r5, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2210      	movs	r2, #16
 800064a:	f7ff feed 	bl	8000428 <printi>
 800064e:	0003      	movs	r3, r0
 8000650:	18e4      	adds	r4, r4, r3
				continue;
 8000652:	e037      	b.n	80006c4 <print+0x19a>
			}
			if( *format == 'u' ) {
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b75      	cmp	r3, #117	; 0x75
 800065a:	d10f      	bne.n	800067c <print+0x152>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	1d1a      	adds	r2, r3, #4
 8000660:	607a      	str	r2, [r7, #4]
 8000662:	6819      	ldr	r1, [r3, #0]
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	2361      	movs	r3, #97	; 0x61
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	9601      	str	r6, [sp, #4]
 800066c:	9500      	str	r5, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	220a      	movs	r2, #10
 8000672:	f7ff fed9 	bl	8000428 <printi>
 8000676:	0003      	movs	r3, r0
 8000678:	18e4      	adds	r4, r4, r3
				continue;
 800067a:	e023      	b.n	80006c4 <print+0x19a>
			}
			if( *format == 'c' ) {
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b63      	cmp	r3, #99	; 0x63
 8000682:	d11f      	bne.n	80006c4 <print+0x19a>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	1d1a      	adds	r2, r3, #4
 8000688:	607a      	str	r2, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	2314      	movs	r3, #20
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8000694:	2314      	movs	r3, #20
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	2200      	movs	r2, #0
 800069a:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 800069c:	2314      	movs	r3, #20
 800069e:	18f9      	adds	r1, r7, r3
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	0033      	movs	r3, r6
 80006a4:	002a      	movs	r2, r5
 80006a6:	f7ff fe67 	bl	8000378 <prints>
 80006aa:	0003      	movs	r3, r0
 80006ac:	18e4      	adds	r4, r4, r3
				continue;
 80006ae:	e009      	b.n	80006c4 <print+0x19a>
			if (*format == '%') goto out;
 80006b0:	46c0      	nop			; (mov r8, r8)
			}
		}
		else {
		out:
			printchar (out, *format);
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	001a      	movs	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff fe37 	bl	8000330 <printchar>
			++pc;
 80006c2:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d000      	beq.n	80006d4 <print+0x1aa>
 80006d2:	e732      	b.n	800053a <print+0x10>
 80006d4:	e000      	b.n	80006d8 <print+0x1ae>
			if (*format == '\0') break;
 80006d6:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <print+0x1bc>
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 80006e6:	0023      	movs	r3, r4
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b007      	add	sp, #28
 80006ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f0:	08001058 	.word	0x08001058

080006f4 <my_printf>:

int my_printf(const char *format, ...)
{
 80006f4:	b40f      	push	{r0, r1, r2, r3}
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 80006fc:	2314      	movs	r3, #20
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	0019      	movs	r1, r3
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff ff0e 	bl	800052a <print>
 800070e:	0003      	movs	r3, r0
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bc80      	pop	{r7}
 8000718:	bc08      	pop	{r3}
 800071a:	b004      	add	sp, #16
 800071c:	4718      	bx	r3

0800071e <my_sprintf>:

int my_sprintf(char *out, const char *format, ...)
{
 800071e:	b40e      	push	{r1, r2, r3}
 8000720:	b580      	push	{r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
        va_list args;

        va_start( args, format );
 8000728:	2320      	movs	r3, #32
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	69f9      	ldr	r1, [r7, #28]
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff fef8 	bl	800052a <print>
 800073a:	0003      	movs	r3, r0
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b005      	add	sp, #20
 8000742:	bc80      	pop	{r7}
 8000744:	bc08      	pop	{r3}
 8000746:	b003      	add	sp, #12
 8000748:	4718      	bx	r3
 800074a:	46c0      	nop			; (mov r8, r8)

0800074c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <USART2_IRQHandler>:
extern uint8_t	console_rx_irq;



void USART2_IRQHandler()
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
	// Test for RXNE pending interrupt
	if ((USART2->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <USART2_IRQHandler+0x2a>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	2220      	movs	r2, #32
 8000784:	4013      	ands	r3, r2
 8000786:	2b20      	cmp	r3, #32
 8000788:	d108      	bne.n	800079c <USART2_IRQHandler+0x22>
	{
		// RXNE flags automatically clears when reading RDR.

		// Store incoming byte
		console_rx_byte = USART2->RDR;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <USART2_IRQHandler+0x2a>)
 800078c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800078e:	b29b      	uxth	r3, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <USART2_IRQHandler+0x2e>)
 8000794:	701a      	strb	r2, [r3, #0]
		console_rx_irq = 1;
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <USART2_IRQHandler+0x32>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
	}

}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40004400 	.word	0x40004400
 80007a8:	20000024 	.word	0x20000024
 80007ac:	20000025 	.word	0x20000025

080007b0 <USART1_IRQHandler>:

extern uint8_t	console_rx_byte_1;
extern uint8_t	console_rx_irq_1;

void USART1_IRQHandler()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	// Test for RXNE pending interrupt
	if ((USART1->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <USART1_IRQHandler+0x28>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	2220      	movs	r2, #32
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d108      	bne.n	80007d2 <USART1_IRQHandler+0x22>
	{
		// RXNE flags automatically clears when reading RDR.

		// Store incoming byte
		console_rx_byte_1 = USART1->RDR;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <USART1_IRQHandler+0x28>)
 80007c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <USART1_IRQHandler+0x2c>)
 80007ca:	701a      	strb	r2, [r3, #0]
		console_rx_irq_1 = 1;
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <USART1_IRQHandler+0x30>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
	}

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013800 	.word	0x40013800
 80007dc:	20000026 	.word	0x20000026
 80007e0:	20000027 	.word	0x20000027

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b7f      	cmp	r3, #127	; 0x7f
 80007f6:	d809      	bhi.n	800080c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <__NVIC_EnableIRQ+0x30>)
 80007fa:	1dfa      	adds	r2, r7, #7
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	0011      	movs	r1, r2
 8000800:	221f      	movs	r2, #31
 8000802:	400a      	ands	r2, r1
 8000804:	2101      	movs	r1, #1
 8000806:	4091      	lsls	r1, r2
 8000808:	000a      	movs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
  }
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b7f      	cmp	r3, #127	; 0x7f
 800082c:	d828      	bhi.n	8000880 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082e:	4c2f      	ldr	r4, [pc, #188]	; (80008ec <__NVIC_SetPriority+0xd4>)
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	492c      	ldr	r1, [pc, #176]	; (80008ec <__NVIC_SetPriority+0xd4>)
 800083a:	1dfa      	adds	r2, r7, #7
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	b252      	sxtb	r2, r2
 8000840:	0892      	lsrs	r2, r2, #2
 8000842:	32c0      	adds	r2, #192	; 0xc0
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	5852      	ldr	r2, [r2, r1]
 8000848:	1df9      	adds	r1, r7, #7
 800084a:	7809      	ldrb	r1, [r1, #0]
 800084c:	0008      	movs	r0, r1
 800084e:	2103      	movs	r1, #3
 8000850:	4001      	ands	r1, r0
 8000852:	00c9      	lsls	r1, r1, #3
 8000854:	20ff      	movs	r0, #255	; 0xff
 8000856:	4088      	lsls	r0, r1
 8000858:	0001      	movs	r1, r0
 800085a:	43c9      	mvns	r1, r1
 800085c:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	0192      	lsls	r2, r2, #6
 8000862:	20ff      	movs	r0, #255	; 0xff
 8000864:	4010      	ands	r0, r2
 8000866:	1dfa      	adds	r2, r7, #7
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	0015      	movs	r5, r2
 800086c:	2203      	movs	r2, #3
 800086e:	402a      	ands	r2, r5
 8000870:	00d2      	lsls	r2, r2, #3
 8000872:	4090      	lsls	r0, r2
 8000874:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000876:	430a      	orrs	r2, r1
 8000878:	33c0      	adds	r3, #192	; 0xc0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800087e:	e031      	b.n	80008e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	4c1b      	ldr	r4, [pc, #108]	; (80008f0 <__NVIC_SetPriority+0xd8>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	230f      	movs	r3, #15
 800088a:	4013      	ands	r3, r2
 800088c:	3b08      	subs	r3, #8
 800088e:	0899      	lsrs	r1, r3, #2
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <__NVIC_SetPriority+0xd8>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	0018      	movs	r0, r3
 8000898:	230f      	movs	r3, #15
 800089a:	4003      	ands	r3, r0
 800089c:	3b08      	subs	r3, #8
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	3306      	adds	r3, #6
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	3304      	adds	r3, #4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0010      	movs	r0, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	4002      	ands	r2, r0
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	20ff      	movs	r0, #255	; 0xff
 80008b8:	4090      	lsls	r0, r2
 80008ba:	0002      	movs	r2, r0
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	019b      	lsls	r3, r3, #6
 80008c4:	20ff      	movs	r0, #255	; 0xff
 80008c6:	4018      	ands	r0, r3
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001d      	movs	r5, r3
 80008ce:	2303      	movs	r3, #3
 80008d0:	402b      	ands	r3, r5
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4098      	lsls	r0, r3
 80008d6:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	431a      	orrs	r2, r3
 80008da:	1d8b      	adds	r3, r1, #6
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	18e3      	adds	r3, r4, r3
 80008e0:	3304      	adds	r3, #4
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bdb0      	pop	{r4, r5, r7, pc}
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <BSP_LED_Init+0x90>)
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <BSP_LED_Init+0x90>)
 80008fc:	6952      	ldr	r2, [r2, #20]
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0289      	lsls	r1, r1, #10
 8000902:	430a      	orrs	r2, r1
 8000904:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8000906:	2390      	movs	r3, #144	; 0x90
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	2290      	movs	r2, #144	; 0x90
 800090c:	05d2      	lsls	r2, r2, #23
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	491d      	ldr	r1, [pc, #116]	; (8000988 <BSP_LED_Init+0x94>)
 8000912:	400a      	ands	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2290      	movs	r2, #144	; 0x90
 800091c:	05d2      	lsls	r2, r2, #23
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	00c9      	lsls	r1, r1, #3
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8000928:	2390      	movs	r3, #144	; 0x90
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	2290      	movs	r2, #144	; 0x90
 800092e:	05d2      	lsls	r2, r2, #23
 8000930:	6852      	ldr	r2, [r2, #4]
 8000932:	2120      	movs	r1, #32
 8000934:	438a      	bics	r2, r1
 8000936:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2290      	movs	r2, #144	; 0x90
 800093e:	05d2      	lsls	r2, r2, #23
 8000940:	6892      	ldr	r2, [r2, #8]
 8000942:	4911      	ldr	r1, [pc, #68]	; (8000988 <BSP_LED_Init+0x94>)
 8000944:	400a      	ands	r2, r1
 8000946:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2290      	movs	r2, #144	; 0x90
 800094e:	05d2      	lsls	r2, r2, #23
 8000950:	6892      	ldr	r2, [r2, #8]
 8000952:	21c0      	movs	r1, #192	; 0xc0
 8000954:	0109      	lsls	r1, r1, #4
 8000956:	430a      	orrs	r2, r1
 8000958:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800095a:	2390      	movs	r3, #144	; 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2290      	movs	r2, #144	; 0x90
 8000960:	05d2      	lsls	r2, r2, #23
 8000962:	68d2      	ldr	r2, [r2, #12]
 8000964:	4908      	ldr	r1, [pc, #32]	; (8000988 <BSP_LED_Init+0x94>)
 8000966:	400a      	ands	r2, r1
 8000968:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2290      	movs	r2, #144	; 0x90
 8000970:	05d2      	lsls	r2, r2, #23
 8000972:	6992      	ldr	r2, [r2, #24]
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	0389      	lsls	r1, r1, #14
 8000978:	430a      	orrs	r2, r1
 800097a:	619a      	str	r2, [r3, #24]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000
 8000988:	fffff3ff 	.word	0xfffff3ff

0800098c <BSP_LED_On>:
 * BSP_LED_On()
 * Turn ON LED on PA5
 */

void BSP_LED_On()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS_5;
 8000990:	2390      	movs	r3, #144	; 0x90
 8000992:	05db      	lsls	r3, r3, #23
 8000994:	2220      	movs	r2, #32
 8000996:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = GPIO_BSRR_BS_8;
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	619a      	str	r2, [r3, #24]
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn OFF LED on PA5
 */

void BSP_LED_Off()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR_5;
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	0392      	lsls	r2, r2, #14
 80009b4:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = GPIO_BSRR_BR_8;
 80009b6:	2390      	movs	r3, #144	; 0x90
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	0452      	lsls	r2, r2, #17
 80009be:	619a      	str	r2, [r3, #24]
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 80009ca:	2390      	movs	r3, #144	; 0x90
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2290      	movs	r2, #144	; 0x90
 80009d0:	05d2      	lsls	r2, r2, #23
 80009d2:	6952      	ldr	r2, [r2, #20]
 80009d4:	2120      	movs	r1, #32
 80009d6:	404a      	eors	r2, r1
 80009d8:	615a      	str	r2, [r3, #20]
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <BSP_PB_Init>:
 * BSP_PB_Init()
 * Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 */

void BSP_PB_Init()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <BSP_PB_Init+0x38>)
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <BSP_PB_Init+0x38>)
 80009e8:	6952      	ldr	r2, [r2, #20]
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0309      	lsls	r1, r1, #12
 80009ee:	430a      	orrs	r2, r1
 80009f0:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <BSP_PB_Init+0x3c>)
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <BSP_PB_Init+0x3c>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	4909      	ldr	r1, [pc, #36]	; (8000a20 <BSP_PB_Init+0x40>)
 80009fa:	400a      	ands	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <BSP_PB_Init+0x3c>)
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <BSP_PB_Init+0x3c>)
 8000a02:	6812      	ldr	r2, [r2, #0]
 8000a04:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <BSP_PB_Init+0x3c>)
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <BSP_PB_Init+0x3c>)
 8000a0a:	68d2      	ldr	r2, [r2, #12]
 8000a0c:	4904      	ldr	r1, [pc, #16]	; (8000a20 <BSP_PB_Init+0x40>)
 8000a0e:	400a      	ands	r2, r1
 8000a10:	60da      	str	r2, [r3, #12]
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	f3ffffff 	.word	0xf3ffffff

08000a24 <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t BSP_PB_GetState()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	uint8_t state;

	if ((GPIOC->IDR & GPIO_IDR_13) == GPIO_IDR_13)
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <BSP_PB_GetState+0x34>)
 8000a2c:	691a      	ldr	r2, [r3, #16]
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	019b      	lsls	r3, r3, #6
 8000a32:	401a      	ands	r2, r3
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	019b      	lsls	r3, r3, #6
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d103      	bne.n	8000a44 <BSP_PB_GetState+0x20>
	{
		state = 0;
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e002      	b.n	8000a4a <BSP_PB_GetState+0x26>
	}
	else
	{
		state = 1;
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
	}

	return state;
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
}
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	48000800 	.word	0x48000800

08000a5c <GPIO_Configuration>:

void GPIO_Configuration(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <GPIO_Configuration+0x90>)
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <GPIO_Configuration+0x90>)
 8000a64:	6952      	ldr	r2, [r2, #20]
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0289      	lsls	r1, r1, #10
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	615a      	str	r2, [r3, #20]

	// Configure PA8 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 8000a6e:	2390      	movs	r3, #144	; 0x90
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2290      	movs	r2, #144	; 0x90
 8000a74:	05d2      	lsls	r2, r2, #23
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	491d      	ldr	r1, [pc, #116]	; (8000af0 <GPIO_Configuration+0x94>)
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER8_Pos);
 8000a7e:	2390      	movs	r3, #144	; 0x90
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2290      	movs	r2, #144	; 0x90
 8000a84:	05d2      	lsls	r2, r2, #23
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0249      	lsls	r1, r1, #9
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]

	// Configure PA8 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_8;
 8000a90:	2390      	movs	r3, #144	; 0x90
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	2290      	movs	r2, #144	; 0x90
 8000a96:	05d2      	lsls	r2, r2, #23
 8000a98:	6852      	ldr	r2, [r2, #4]
 8000a9a:	4916      	ldr	r1, [pc, #88]	; (8000af4 <GPIO_Configuration+0x98>)
 8000a9c:	400a      	ands	r2, r1
 8000a9e:	605a      	str	r2, [r3, #4]

	// Configure PA8 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR8_Msk;
 8000aa0:	2390      	movs	r3, #144	; 0x90
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	2290      	movs	r2, #144	; 0x90
 8000aa6:	05d2      	lsls	r2, r2, #23
 8000aa8:	6892      	ldr	r2, [r2, #8]
 8000aaa:	4911      	ldr	r1, [pc, #68]	; (8000af0 <GPIO_Configuration+0x94>)
 8000aac:	400a      	ands	r2, r1
 8000aae:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR8_Pos);
 8000ab0:	2390      	movs	r3, #144	; 0x90
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	2290      	movs	r2, #144	; 0x90
 8000ab6:	05d2      	lsls	r2, r2, #23
 8000ab8:	6892      	ldr	r2, [r2, #8]
 8000aba:	21c0      	movs	r1, #192	; 0xc0
 8000abc:	0289      	lsls	r1, r1, #10
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	609a      	str	r2, [r3, #8]

	// Disable PA8 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR8_Msk;
 8000ac2:	2390      	movs	r3, #144	; 0x90
 8000ac4:	05db      	lsls	r3, r3, #23
 8000ac6:	2290      	movs	r2, #144	; 0x90
 8000ac8:	05d2      	lsls	r2, r2, #23
 8000aca:	68d2      	ldr	r2, [r2, #12]
 8000acc:	4908      	ldr	r1, [pc, #32]	; (8000af0 <GPIO_Configuration+0x94>)
 8000ace:	400a      	ands	r2, r1
 8000ad0:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_8;
 8000ad2:	2390      	movs	r3, #144	; 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	2290      	movs	r2, #144	; 0x90
 8000ad8:	05d2      	lsls	r2, r2, #23
 8000ada:	6992      	ldr	r2, [r2, #24]
 8000adc:	2180      	movs	r1, #128	; 0x80
 8000ade:	0449      	lsls	r1, r1, #17
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	619a      	str	r2, [r3, #24]

}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	40021000 	.word	0x40021000
 8000af0:	fffcffff 	.word	0xfffcffff
 8000af4:	fffffeff 	.word	0xfffffeff

08000af8 <USART_Configuration>:

void USART_Configuration(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <USART_Configuration+0xc0>)
 8000afe:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <USART_Configuration+0xc0>)
 8000b00:	6952      	ldr	r2, [r2, #20]
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	0289      	lsls	r1, r1, #10
 8000b06:	430a      	orrs	r2, r1
 8000b08:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8000b0a:	2390      	movs	r3, #144	; 0x90
 8000b0c:	05db      	lsls	r3, r3, #23
 8000b0e:	2290      	movs	r2, #144	; 0x90
 8000b10:	05d2      	lsls	r2, r2, #23
 8000b12:	6812      	ldr	r2, [r2, #0]
 8000b14:	21f0      	movs	r1, #240	; 0xf0
 8000b16:	438a      	bics	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |=  (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8000b1a:	2390      	movs	r3, #144	; 0x90
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	2290      	movs	r2, #144	; 0x90
 8000b20:	05d2      	lsls	r2, r2, #23
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	21a0      	movs	r1, #160	; 0xa0
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8000b2a:	2390      	movs	r3, #144	; 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	2290      	movs	r2, #144	; 0x90
 8000b30:	05d2      	lsls	r2, r2, #23
 8000b32:	6a12      	ldr	r2, [r2, #32]
 8000b34:	4921      	ldr	r1, [pc, #132]	; (8000bbc <USART_Configuration+0xc4>)
 8000b36:	400a      	ands	r2, r1
 8000b38:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8000b3a:	2390      	movs	r3, #144	; 0x90
 8000b3c:	05db      	lsls	r3, r3, #23
 8000b3e:	2290      	movs	r2, #144	; 0x90
 8000b40:	05d2      	lsls	r2, r2, #23
 8000b42:	6a12      	ldr	r2, [r2, #32]
 8000b44:	2188      	movs	r1, #136	; 0x88
 8000b46:	0149      	lsls	r1, r1, #5
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <USART_Configuration+0xc0>)
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <USART_Configuration+0xc0>)
 8000b50:	69d2      	ldr	r2, [r2, #28]
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0289      	lsls	r1, r1, #10
 8000b56:	430a      	orrs	r2, r1
 8000b58:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8000b66:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <USART_Configuration+0xc0>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <USART_Configuration+0xc0>)
 8000b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b72:	4914      	ldr	r1, [pc, #80]	; (8000bc4 <USART_Configuration+0xcc>)
 8000b74:	400a      	ands	r2, r1
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
	// BRR = 417 -> Actual BaudRate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Actual BaudRate = 115246.0984 -> 0.04% error (better choice)

	USART2->CR1 |= USART_CR1_OVER8;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b7a:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	0209      	lsls	r1, r1, #8
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <USART_Configuration+0xd0>)
 8000b8a:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	210c      	movs	r1, #12
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]

	// Enable interrupt on RXNE event
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <USART_Configuration+0xc8>)
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <USART_Configuration+0xc8>)
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <USART_Configuration+0xc8>)
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	ffff00ff 	.word	0xffff00ff
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	fffcffff 	.word	0xfffcffff
 8000bc8:	00000341 	.word	0x00000341

08000bcc <USART1_Configuration>:

void USART1_Configuration(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <USART1_Configuration+0xc0>)
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <USART1_Configuration+0xc0>)
 8000bd4:	6952      	ldr	r2, [r2, #20]
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	0289      	lsls	r1, r1, #10
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	615a      	str	r2, [r3, #20]

	// Configure PA9 and PA10 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER9_Msk | GPIO_MODER_MODER10_Msk);
 8000bde:	2390      	movs	r3, #144	; 0x90
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	2290      	movs	r2, #144	; 0x90
 8000be4:	05d2      	lsls	r2, r2, #23
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	4929      	ldr	r1, [pc, #164]	; (8000c90 <USART1_Configuration+0xc4>)
 8000bea:	400a      	ands	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |=  (0x02 <<GPIO_MODER_MODER9_Pos) | (0x02 <<GPIO_MODER_MODER10_Pos);
 8000bee:	2390      	movs	r3, #144	; 0x90
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	2290      	movs	r2, #144	; 0x90
 8000bf4:	05d2      	lsls	r2, r2, #23
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	21a0      	movs	r1, #160	; 0xa0
 8000bfa:	0389      	lsls	r1, r1, #14
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[1] &= ~(0x0000FF00);
 8000c00:	2390      	movs	r3, #144	; 0x90
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	2290      	movs	r2, #144	; 0x90
 8000c06:	05d2      	lsls	r2, r2, #23
 8000c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c0a:	4922      	ldr	r1, [pc, #136]	; (8000c94 <USART1_Configuration+0xc8>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00000110);
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2290      	movs	r2, #144	; 0x90
 8000c16:	05d2      	lsls	r2, r2, #23
 8000c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c1a:	2188      	movs	r1, #136	; 0x88
 8000c1c:	0049      	lsls	r1, r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24

	// Enable USART1 clock
	RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <USART1_Configuration+0xc0>)
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <USART1_Configuration+0xc0>)
 8000c26:	6992      	ldr	r2, [r2, #24]
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	01c9      	lsls	r1, r1, #7
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	619a      	str	r2, [r3, #24]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART1->CR1 = 0x00000000;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
	USART1->CR2 = 0x00000000;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
	USART1->CR3 = 0x00000000;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART1SW_Msk;
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <USART1_Configuration+0xc0>)
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <USART1_Configuration+0xc0>)
 8000c46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c48:	2103      	movs	r1, #3
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
	// BRR = 417 -> Actual BaudRate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Actual BaudRate = 115246.0984 -> 0.04% error (better choice)

	USART1->CR1 |= USART_CR1_OVER8;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c50:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0209      	lsls	r1, r1, #8
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
	USART1->BRR = 10000;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <USART1_Configuration+0xd0>)
 8000c60:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	210c      	movs	r1, #12
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

	// Enable interrupt on RXNE event
	USART1->CR1 |= USART_CR1_RXNEIE;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	2120      	movs	r1, #32
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART1->CR1 |= USART_CR1_UE;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <USART1_Configuration+0xcc>)
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	ffc3ffff 	.word	0xffc3ffff
 8000c94:	ffff00ff 	.word	0xffff00ff
 8000c98:	40013800 	.word	0x40013800
 8000c9c:	00002710 	.word	0x00002710

08000ca0 <BSP_NVIC_Init>:
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */

void BSP_NVIC_Init()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	// Set priority level 1 for USART2 interrupt
	NVIC_SetPriority(USART2_IRQn, 0);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f7ff fdb6 	bl	8000818 <__NVIC_SetPriority>

	// Enable USART2 interrupts
	NVIC_EnableIRQ(USART2_IRQn);
 8000cac:	201c      	movs	r0, #28
 8000cae:	f7ff fd99 	bl	80007e4 <__NVIC_EnableIRQ>

	// Set priority level 1 for USART2 interrupt
	NVIC_SetPriority(USART1_IRQn, 1);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	201b      	movs	r0, #27
 8000cb6:	f7ff fdaf 	bl	8000818 <__NVIC_SetPriority>

	// Enable USART2 interrupts
	NVIC_EnableIRQ(USART1_IRQn);
 8000cba:	201b      	movs	r0, #27
 8000cbc:	f7ff fd92 	bl	80007e4 <__NVIC_EnableIRQ>
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	08001080 	.word	0x08001080
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000028 	.word	0x20000028

08000cdc <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <SystemInit+0x70>)
 8000ce2:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <SystemInit+0x70>)
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <SystemInit+0x70>)
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <SystemInit+0x70>)
 8000cf0:	6852      	ldr	r2, [r2, #4]
 8000cf2:	4917      	ldr	r1, [pc, #92]	; (8000d50 <SystemInit+0x74>)
 8000cf4:	400a      	ands	r2, r1
 8000cf6:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <SystemInit+0x70>)
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <SystemInit+0x70>)
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	4915      	ldr	r1, [pc, #84]	; (8000d54 <SystemInit+0x78>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <SystemInit+0x70>)
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <SystemInit+0x70>)
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	4913      	ldr	r1, [pc, #76]	; (8000d58 <SystemInit+0x7c>)
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <SystemInit+0x70>)
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <SystemInit+0x70>)
 8000d14:	6852      	ldr	r2, [r2, #4]
 8000d16:	4911      	ldr	r1, [pc, #68]	; (8000d5c <SystemInit+0x80>)
 8000d18:	400a      	ands	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <SystemInit+0x70>)
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <SystemInit+0x70>)
 8000d20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d22:	210f      	movs	r1, #15
 8000d24:	438a      	bics	r2, r1
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <SystemInit+0x70>)
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <SystemInit+0x70>)
 8000d2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <SystemInit+0x84>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SystemInit+0x70>)
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <SystemInit+0x70>)
 8000d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <SystemInit+0x70>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	08ffb80c 	.word	0x08ffb80c
 8000d54:	fef6ffff 	.word	0xfef6ffff
 8000d58:	fffbffff 	.word	0xfffbffff
 8000d5c:	ffc0ffff 	.word	0xffc0ffff
 8000d60:	fff0feac 	.word	0xfff0feac

08000d64 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <SystemCoreClockUpdate+0xec>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	220c      	movs	r2, #12
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d007      	beq.n	8000d9a <SystemCoreClockUpdate+0x36>
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d009      	beq.n	8000da2 <SystemCoreClockUpdate+0x3e>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d148      	bne.n	8000e24 <SystemCoreClockUpdate+0xc0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <SystemCoreClockUpdate+0xf4>)
 8000d96:	601a      	str	r2, [r3, #0]
      break;
 8000d98:	e048      	b.n	8000e2c <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000d9c:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <SystemCoreClockUpdate+0xf4>)
 8000d9e:	601a      	str	r2, [r3, #0]
      break;
 8000da0:	e044      	b.n	8000e2c <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <SystemCoreClockUpdate+0xec>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	23f0      	movs	r3, #240	; 0xf0
 8000da8:	039b      	lsls	r3, r3, #14
 8000daa:	4013      	ands	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SystemCoreClockUpdate+0xec>)
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	4013      	ands	r3, r2
 8000db8:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	0c9b      	lsrs	r3, r3, #18
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <SystemCoreClockUpdate+0xec>)
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	4013      	ands	r3, r2
 8000dca:	3301      	adds	r3, #1
 8000dcc:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d10a      	bne.n	8000dee <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000dd8:	6839      	ldr	r1, [r7, #0]
 8000dda:	481f      	ldr	r0, [pc, #124]	; (8000e58 <SystemCoreClockUpdate+0xf4>)
 8000ddc:	f000 f842 	bl	8000e64 <__udivsi3>
 8000de0:	0003      	movs	r3, r0
 8000de2:	001a      	movs	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	435a      	muls	r2, r3
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000dea:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8000dec:	e01e      	b.n	8000e2c <SystemCoreClockUpdate+0xc8>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	23c0      	movs	r3, #192	; 0xc0
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d10a      	bne.n	8000e0e <SystemCoreClockUpdate+0xaa>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8000df8:	6839      	ldr	r1, [r7, #0]
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <SystemCoreClockUpdate+0xf8>)
 8000dfc:	f000 f832 	bl	8000e64 <__udivsi3>
 8000e00:	0003      	movs	r3, r0
 8000e02:	001a      	movs	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	435a      	muls	r2, r3
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000e0a:	601a      	str	r2, [r3, #0]
      break;
 8000e0c:	e00e      	b.n	8000e2c <SystemCoreClockUpdate+0xc8>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <SystemCoreClockUpdate+0xf4>)
 8000e12:	f000 f827 	bl	8000e64 <__udivsi3>
 8000e16:	0003      	movs	r3, r0
 8000e18:	001a      	movs	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	435a      	muls	r2, r3
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000e20:	601a      	str	r2, [r3, #0]
      break;
 8000e22:	e003      	b.n	8000e2c <SystemCoreClockUpdate+0xc8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000e26:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <SystemCoreClockUpdate+0xf4>)
 8000e28:	601a      	str	r2, [r3, #0]
      break;
 8000e2a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <SystemCoreClockUpdate+0xec>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	220f      	movs	r2, #15
 8000e34:	4013      	ands	r3, r2
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SystemCoreClockUpdate+0xfc>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	40da      	lsrs	r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <SystemCoreClockUpdate+0xf0>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	20000004 	.word	0x20000004
 8000e58:	007a1200 	.word	0x007a1200
 8000e5c:	02dc6c00 	.word	0x02dc6c00
 8000e60:	08001060 	.word	0x08001060

08000e64 <__udivsi3>:
 8000e64:	2200      	movs	r2, #0
 8000e66:	0843      	lsrs	r3, r0, #1
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d374      	bcc.n	8000f56 <__udivsi3+0xf2>
 8000e6c:	0903      	lsrs	r3, r0, #4
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d35f      	bcc.n	8000f32 <__udivsi3+0xce>
 8000e72:	0a03      	lsrs	r3, r0, #8
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d344      	bcc.n	8000f02 <__udivsi3+0x9e>
 8000e78:	0b03      	lsrs	r3, r0, #12
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d328      	bcc.n	8000ed0 <__udivsi3+0x6c>
 8000e7e:	0c03      	lsrs	r3, r0, #16
 8000e80:	428b      	cmp	r3, r1
 8000e82:	d30d      	bcc.n	8000ea0 <__udivsi3+0x3c>
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	0209      	lsls	r1, r1, #8
 8000e88:	ba12      	rev	r2, r2
 8000e8a:	0c03      	lsrs	r3, r0, #16
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d302      	bcc.n	8000e96 <__udivsi3+0x32>
 8000e90:	1212      	asrs	r2, r2, #8
 8000e92:	0209      	lsls	r1, r1, #8
 8000e94:	d065      	beq.n	8000f62 <__udivsi3+0xfe>
 8000e96:	0b03      	lsrs	r3, r0, #12
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d319      	bcc.n	8000ed0 <__udivsi3+0x6c>
 8000e9c:	e000      	b.n	8000ea0 <__udivsi3+0x3c>
 8000e9e:	0a09      	lsrs	r1, r1, #8
 8000ea0:	0bc3      	lsrs	r3, r0, #15
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d301      	bcc.n	8000eaa <__udivsi3+0x46>
 8000ea6:	03cb      	lsls	r3, r1, #15
 8000ea8:	1ac0      	subs	r0, r0, r3
 8000eaa:	4152      	adcs	r2, r2
 8000eac:	0b83      	lsrs	r3, r0, #14
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d301      	bcc.n	8000eb6 <__udivsi3+0x52>
 8000eb2:	038b      	lsls	r3, r1, #14
 8000eb4:	1ac0      	subs	r0, r0, r3
 8000eb6:	4152      	adcs	r2, r2
 8000eb8:	0b43      	lsrs	r3, r0, #13
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d301      	bcc.n	8000ec2 <__udivsi3+0x5e>
 8000ebe:	034b      	lsls	r3, r1, #13
 8000ec0:	1ac0      	subs	r0, r0, r3
 8000ec2:	4152      	adcs	r2, r2
 8000ec4:	0b03      	lsrs	r3, r0, #12
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d301      	bcc.n	8000ece <__udivsi3+0x6a>
 8000eca:	030b      	lsls	r3, r1, #12
 8000ecc:	1ac0      	subs	r0, r0, r3
 8000ece:	4152      	adcs	r2, r2
 8000ed0:	0ac3      	lsrs	r3, r0, #11
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d301      	bcc.n	8000eda <__udivsi3+0x76>
 8000ed6:	02cb      	lsls	r3, r1, #11
 8000ed8:	1ac0      	subs	r0, r0, r3
 8000eda:	4152      	adcs	r2, r2
 8000edc:	0a83      	lsrs	r3, r0, #10
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d301      	bcc.n	8000ee6 <__udivsi3+0x82>
 8000ee2:	028b      	lsls	r3, r1, #10
 8000ee4:	1ac0      	subs	r0, r0, r3
 8000ee6:	4152      	adcs	r2, r2
 8000ee8:	0a43      	lsrs	r3, r0, #9
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d301      	bcc.n	8000ef2 <__udivsi3+0x8e>
 8000eee:	024b      	lsls	r3, r1, #9
 8000ef0:	1ac0      	subs	r0, r0, r3
 8000ef2:	4152      	adcs	r2, r2
 8000ef4:	0a03      	lsrs	r3, r0, #8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d301      	bcc.n	8000efe <__udivsi3+0x9a>
 8000efa:	020b      	lsls	r3, r1, #8
 8000efc:	1ac0      	subs	r0, r0, r3
 8000efe:	4152      	adcs	r2, r2
 8000f00:	d2cd      	bcs.n	8000e9e <__udivsi3+0x3a>
 8000f02:	09c3      	lsrs	r3, r0, #7
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d301      	bcc.n	8000f0c <__udivsi3+0xa8>
 8000f08:	01cb      	lsls	r3, r1, #7
 8000f0a:	1ac0      	subs	r0, r0, r3
 8000f0c:	4152      	adcs	r2, r2
 8000f0e:	0983      	lsrs	r3, r0, #6
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d301      	bcc.n	8000f18 <__udivsi3+0xb4>
 8000f14:	018b      	lsls	r3, r1, #6
 8000f16:	1ac0      	subs	r0, r0, r3
 8000f18:	4152      	adcs	r2, r2
 8000f1a:	0943      	lsrs	r3, r0, #5
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d301      	bcc.n	8000f24 <__udivsi3+0xc0>
 8000f20:	014b      	lsls	r3, r1, #5
 8000f22:	1ac0      	subs	r0, r0, r3
 8000f24:	4152      	adcs	r2, r2
 8000f26:	0903      	lsrs	r3, r0, #4
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d301      	bcc.n	8000f30 <__udivsi3+0xcc>
 8000f2c:	010b      	lsls	r3, r1, #4
 8000f2e:	1ac0      	subs	r0, r0, r3
 8000f30:	4152      	adcs	r2, r2
 8000f32:	08c3      	lsrs	r3, r0, #3
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d301      	bcc.n	8000f3c <__udivsi3+0xd8>
 8000f38:	00cb      	lsls	r3, r1, #3
 8000f3a:	1ac0      	subs	r0, r0, r3
 8000f3c:	4152      	adcs	r2, r2
 8000f3e:	0883      	lsrs	r3, r0, #2
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d301      	bcc.n	8000f48 <__udivsi3+0xe4>
 8000f44:	008b      	lsls	r3, r1, #2
 8000f46:	1ac0      	subs	r0, r0, r3
 8000f48:	4152      	adcs	r2, r2
 8000f4a:	0843      	lsrs	r3, r0, #1
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d301      	bcc.n	8000f54 <__udivsi3+0xf0>
 8000f50:	004b      	lsls	r3, r1, #1
 8000f52:	1ac0      	subs	r0, r0, r3
 8000f54:	4152      	adcs	r2, r2
 8000f56:	1a41      	subs	r1, r0, r1
 8000f58:	d200      	bcs.n	8000f5c <__udivsi3+0xf8>
 8000f5a:	4601      	mov	r1, r0
 8000f5c:	4152      	adcs	r2, r2
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4770      	bx	lr
 8000f62:	e7ff      	b.n	8000f64 <__udivsi3+0x100>
 8000f64:	b501      	push	{r0, lr}
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f806 	bl	8000f78 <__aeabi_idiv0>
 8000f6c:	bd02      	pop	{r1, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)

08000f70 <__aeabi_uidivmod>:
 8000f70:	2900      	cmp	r1, #0
 8000f72:	d0f7      	beq.n	8000f64 <__udivsi3+0x100>
 8000f74:	e776      	b.n	8000e64 <__udivsi3>
 8000f76:	4770      	bx	lr

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	46c0      	nop			; (mov r8, r8)

08000f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa6:	f7ff fe99 	bl	8000cdc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000faa:	f000 f811 	bl	8000fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff f8a9 	bl	8000104 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000fc0:	08001080 	.word	0x08001080
  ldr r2, =_sbss
 8000fc4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000fc8:	20000028 	.word	0x20000028

08000fcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_COMP_IRQHandler>
	...

08000fd0 <__libc_init_array>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4d0c      	ldr	r5, [pc, #48]	; (8001008 <__libc_init_array+0x38>)
 8000fd6:	4c0d      	ldr	r4, [pc, #52]	; (800100c <__libc_init_array+0x3c>)
 8000fd8:	1b64      	subs	r4, r4, r5
 8000fda:	10a4      	asrs	r4, r4, #2
 8000fdc:	42a6      	cmp	r6, r4
 8000fde:	d109      	bne.n	8000ff4 <__libc_init_array+0x24>
 8000fe0:	2600      	movs	r6, #0
 8000fe2:	f000 f81b 	bl	800101c <_init>
 8000fe6:	4d0a      	ldr	r5, [pc, #40]	; (8001010 <__libc_init_array+0x40>)
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <__libc_init_array+0x44>)
 8000fea:	1b64      	subs	r4, r4, r5
 8000fec:	10a4      	asrs	r4, r4, #2
 8000fee:	42a6      	cmp	r6, r4
 8000ff0:	d105      	bne.n	8000ffe <__libc_init_array+0x2e>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	00b3      	lsls	r3, r6, #2
 8000ff6:	58eb      	ldr	r3, [r5, r3]
 8000ff8:	4798      	blx	r3
 8000ffa:	3601      	adds	r6, #1
 8000ffc:	e7ee      	b.n	8000fdc <__libc_init_array+0xc>
 8000ffe:	00b3      	lsls	r3, r6, #2
 8001000:	58eb      	ldr	r3, [r5, r3]
 8001002:	4798      	blx	r3
 8001004:	3601      	adds	r6, #1
 8001006:	e7f2      	b.n	8000fee <__libc_init_array+0x1e>
 8001008:	08001078 	.word	0x08001078
 800100c:	08001078 	.word	0x08001078
 8001010:	08001078 	.word	0x08001078
 8001014:	0800107c 	.word	0x0800107c

08001018 <__EH_FRAME_BEGIN__>:
 8001018:	00000000                                ....

0800101c <_init>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr

08001028 <_fini>:
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102e:	bc08      	pop	{r3}
 8001030:	469e      	mov	lr, r3
 8001032:	4770      	bx	lr
